/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const PostRouteMatrixRequestBody: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PostRouteMatrixRequestBody",
    modelProperties: {
      origins: {
        serializedName: "origins",
        type: {
          name: "Composite",
          className: "GeoJsonMultiPoint"
        }
      },
      destinations: {
        serializedName: "destinations",
        type: {
          name: "Composite",
          className: "GeoJsonMultiPoint"
        }
      }
    }
  }
};

export const GeoJsonObject: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonObject",
    uberParent: "GeoJsonObject",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GeoJsonMultiPointData: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonMultiPointData",
    modelProperties: {
      coordinates: {
        serializedName: "coordinates",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Number"
                }
              }
            }
          }
        }
      }
    }
  }
};

export const RouteMatrixResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteMatrixResponse",
    modelProperties: {
      formatVersion: {
        serializedName: "formatVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      matrix: {
        serializedName: "matrix",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "RouteMatrixResult"
                }
              }
            }
          }
        }
      },
      summary: {
        serializedName: "summary",
        type: {
          name: "Composite",
          className: "RouteMatrixSummary"
        }
      }
    }
  }
};

export const RouteMatrixResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteMatrixResult",
    modelProperties: {
      statusCode: {
        serializedName: "statusCode",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      response: {
        serializedName: "response",
        type: {
          name: "Composite",
          className: "RouteMatrixResultResponse"
        }
      }
    }
  }
};

export const RouteMatrixResultResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteMatrixResultResponse",
    modelProperties: {
      routeSummary: {
        serializedName: "routeSummary",
        type: {
          name: "Composite",
          className: "RouteResultLegSummary"
        }
      }
    }
  }
};

export const RouteResultLegSummary: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteResultLegSummary",
    modelProperties: {
      lengthInMeters: {
        serializedName: "lengthInMeters",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      travelTimeInSeconds: {
        serializedName: "travelTimeInSeconds",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      trafficDelayInSeconds: {
        serializedName: "trafficDelayInSeconds",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      departureTime: {
        serializedName: "departureTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      arrivalTime: {
        serializedName: "arrivalTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      noTrafficTravelTimeInSeconds: {
        serializedName: "noTrafficTravelTimeInSeconds",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      historicTrafficTravelTimeInSeconds: {
        serializedName: "historicTrafficTravelTimeInSeconds",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      liveTrafficIncidentsTravelTimeInSeconds: {
        serializedName: "liveTrafficIncidentsTravelTimeInSeconds",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      fuelConsumptionInLiters: {
        serializedName: "fuelConsumptionInLiters",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      batteryConsumptionInkWh: {
        serializedName: "batteryConsumptionInkWh",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RouteMatrixSummary: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteMatrixSummary",
    modelProperties: {
      successfulRoutes: {
        serializedName: "successfulRoutes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalRoutes: {
        serializedName: "totalRoutes",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ErrorResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "any"
        }
      }
    }
  }
};

export const RouteDirectionsResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteDirectionsResponse",
    modelProperties: {
      formatVersion: {
        serializedName: "formatVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      routes: {
        serializedName: "routes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouteDirectionsResult"
            }
          }
        }
      },
      optimizedWaypoints: {
        serializedName: "optimizedWaypoints",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouteOptimizedWaypoint"
            }
          }
        }
      },
      report: {
        serializedName: "report",
        type: {
          name: "Composite",
          className: "RouteResponseReport"
        }
      }
    }
  }
};

export const RouteDirectionsResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteDirectionsResult",
    modelProperties: {
      summary: {
        serializedName: "summary",
        type: {
          name: "Composite",
          className: "RouteDirectionsSummary"
        }
      },
      legs: {
        serializedName: "legs",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouteResultLeg"
            }
          }
        }
      },
      sections: {
        serializedName: "sections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouteResultSection"
            }
          }
        }
      },
      guidance: {
        serializedName: "guidance",
        type: {
          name: "Composite",
          className: "RouteResultGuidance"
        }
      }
    }
  }
};

export const RouteDirectionsSummary: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteDirectionsSummary",
    modelProperties: {
      lengthInMeters: {
        serializedName: "lengthInMeters",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      travelTimeInSeconds: {
        serializedName: "travelTimeInSeconds",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      trafficDelayInSeconds: {
        serializedName: "trafficDelayInSeconds",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      departureTime: {
        serializedName: "departureTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      arrivalTime: {
        serializedName: "arrivalTime",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouteResultLeg: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteResultLeg",
    modelProperties: {
      summary: {
        serializedName: "summary",
        type: {
          name: "Composite",
          className: "RouteResultLegSummary"
        }
      },
      points: {
        serializedName: "points",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CoordinatesPair"
            }
          }
        }
      }
    }
  }
};

export const CoordinatesPair: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CoordinatesPair",
    modelProperties: {
      latitude: {
        serializedName: "latitude",
        type: {
          name: "Number"
        }
      },
      longitude: {
        serializedName: "longitude",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RouteResultSection: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteResultSection",
    modelProperties: {
      startPointIndex: {
        serializedName: "startPointIndex",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      endPointIndex: {
        serializedName: "endPointIndex",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      sectionType: {
        serializedName: "sectionType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      travelMode: {
        serializedName: "travelMode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      simpleCategory: {
        serializedName: "simpleCategory",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      effectiveSpeedInKmh: {
        serializedName: "effectiveSpeedInKmh",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      delayInSeconds: {
        serializedName: "delayInSeconds",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      magnitudeOfDelay: {
        serializedName: "magnitudeOfDelay",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tec: {
        serializedName: "tec",
        type: {
          name: "Composite",
          className: "RouteResultSectionTec"
        }
      }
    }
  }
};

export const RouteResultSectionTec: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteResultSectionTec",
    modelProperties: {
      effectCode: {
        serializedName: "effectCode",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      causes: {
        serializedName: "causes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouteResultSectionTecCause"
            }
          }
        }
      }
    }
  }
};

export const RouteResultSectionTecCause: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteResultSectionTecCause",
    modelProperties: {
      mainCauseCode: {
        serializedName: "mainCauseCode",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      subCauseCode: {
        serializedName: "subCauseCode",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RouteResultGuidance: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteResultGuidance",
    modelProperties: {
      instructions: {
        serializedName: "instructions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouteResultInstruction"
            }
          }
        }
      },
      instructionGroups: {
        serializedName: "instructionGroups",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouteResultInstructionGroup"
            }
          }
        }
      }
    }
  }
};

export const RouteResultInstruction: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteResultInstruction",
    modelProperties: {
      routeOffsetInMeters: {
        serializedName: "routeOffsetInMeters",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      travelTimeInSeconds: {
        serializedName: "travelTimeInSeconds",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      point: {
        serializedName: "point",
        type: {
          name: "Composite",
          className: "CoordinatesPair"
        }
      },
      pointIndex: {
        serializedName: "pointIndex",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      instructionType: {
        serializedName: "instructionType",
        type: {
          name: "String"
        }
      },
      roadNumbers: {
        serializedName: "roadNumbers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      exitNumber: {
        serializedName: "exitNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      street: {
        serializedName: "street",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      signpostText: {
        serializedName: "signpostText",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      countryCode: {
        serializedName: "countryCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      stateCode: {
        serializedName: "stateCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      junctionType: {
        serializedName: "junctionType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      turnAngleInDecimalDegrees: {
        serializedName: "turnAngleInDecimalDegrees",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      roundaboutExitNumber: {
        serializedName: "roundaboutExitNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      possibleCombineWithNext: {
        serializedName: "possibleCombineWithNext",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      drivingSide: {
        serializedName: "drivingSide",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      maneuver: {
        serializedName: "maneuver",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      combinedMessage: {
        serializedName: "combinedMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouteResultInstructionGroup: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteResultInstructionGroup",
    modelProperties: {
      firstInstructionIndex: {
        serializedName: "firstInstructionIndex",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      lastInstructionIndex: {
        serializedName: "lastInstructionIndex",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      groupLengthInMeters: {
        serializedName: "groupLengthInMeters",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      groupMessage: {
        serializedName: "groupMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouteOptimizedWaypoint: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteOptimizedWaypoint",
    modelProperties: {
      providedIndex: {
        serializedName: "providedIndex",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      optimizedIndex: {
        serializedName: "optimizedIndex",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RouteResponseReport: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteResponseReport",
    modelProperties: {
      effectiveSettings: {
        serializedName: "effectiveSettings",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouteResponseReportEffectiveSetting"
            }
          }
        }
      }
    }
  }
};

export const RouteResponseReportEffectiveSetting: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteResponseReportEffectiveSetting",
    modelProperties: {
      key: {
        serializedName: "key",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PostRouteDirectionsRequestBody: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PostRouteDirectionsRequestBody",
    modelProperties: {
      supportingPoints: {
        serializedName: "supportingPoints",
        type: {
          name: "any"
        }
      },
      avoidVignette: {
        serializedName: "avoidVignette",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      allowVignette: {
        serializedName: "allowVignette",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      avoidAreas: {
        serializedName: "avoidAreas",
        type: {
          name: "Composite",
          className: "GeoJsonMultiPolygon"
        }
      }
    }
  }
};

export const GeoJsonMultiPolygonData: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonMultiPolygonData",
    modelProperties: {
      coordinates: {
        serializedName: "coordinates",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Sequence",
                  element: {
                    type: {
                      name: "Sequence",
                      element: {
                        type: {
                          name: "Number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};

export const GetRouteRangeResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GetRouteRangeResponse",
    modelProperties: {
      formatVersion: {
        serializedName: "formatVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reachableRange: {
        serializedName: "reachableRange",
        type: {
          name: "Composite",
          className: "RouteRange"
        }
      },
      report: {
        serializedName: "report",
        type: {
          name: "Composite",
          className: "RouteResponseReport"
        }
      }
    }
  }
};

export const RouteRange: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteRange",
    modelProperties: {
      center: {
        serializedName: "center",
        type: {
          name: "Composite",
          className: "CoordinatesPair"
        }
      },
      boundary: {
        serializedName: "boundary",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CoordinatesPair"
            }
          }
        }
      }
    }
  }
};

export const BatchRequestBody: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BatchRequestBody",
    modelProperties: {
      batchItems: {
        serializedName: "batchItems",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BatchRequestBodyBatchItemsItem"
            }
          }
        }
      }
    }
  }
};

export const BatchRequestBodyBatchItemsItem: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BatchRequestBodyBatchItemsItem",
    modelProperties: {
      query: {
        serializedName: "query",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BatchItem: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BatchItem",
    modelProperties: {
      statusCode: {
        serializedName: "statusCode",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BatchResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BatchResponse",
    modelProperties: {
      summary: {
        serializedName: "summary",
        type: {
          name: "Composite",
          className: "BatchResponseSummary"
        }
      }
    }
  }
};

export const BatchResponseSummary: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BatchResponseSummary",
    modelProperties: {
      successfulRequests: {
        serializedName: "successfulRequests",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalRequests: {
        serializedName: "totalRequests",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GeoJsonPointData: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonPointData",
    modelProperties: {
      coordinates: {
        serializedName: "coordinates",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const GeoJsonLineStringData: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonLineStringData",
    modelProperties: {
      coordinates: {
        serializedName: "coordinates",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Number"
                }
              }
            }
          }
        }
      }
    }
  }
};

export const GeoJsonMultiLineStringData: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonMultiLineStringData",
    modelProperties: {
      coordinates: {
        serializedName: "coordinates",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Sequence",
                  element: {
                    type: {
                      name: "Number"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};

export const GeoJsonPolygonData: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonPolygonData",
    modelProperties: {
      coordinates: {
        serializedName: "coordinates",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Sequence",
                  element: {
                    type: {
                      name: "Number"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};

export const GeoJsonGeometryCollectionData: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonGeometryCollectionData",
    modelProperties: {
      geometries: {
        serializedName: "geometries",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GeoJsonGeometry"
            }
          }
        }
      }
    }
  }
};

export const GeoJsonFeatureData: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonFeatureData",
    modelProperties: {
      geometry: {
        serializedName: "geometry",
        type: {
          name: "Composite",
          className: "GeoJsonGeometry"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "any"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      featureType: {
        serializedName: "featureType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GeoJsonFeatureCollectionData: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoJsonFeatureCollectionData",
    modelProperties: {
      features: {
        serializedName: "features",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GeoJsonFeature"
            }
          }
        }
      }
    }
  }
};

export const GeoJsonGeometry: coreHttp.CompositeMapper = {
  serializedName: "GeoJsonGeometry",
  type: {
    name: "Composite",
    className: "GeoJsonGeometry",
    uberParent: "GeoJsonObject",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      ...GeoJsonObject.type.modelProperties
    }
  }
};

export const GeoJsonFeature: coreHttp.CompositeMapper = {
  serializedName: "Feature",
  type: {
    name: "Composite",
    className: "GeoJsonFeature",
    uberParent: "GeoJsonObject",
    polymorphicDiscriminator: GeoJsonObject.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonObject.type.modelProperties,
      ...GeoJsonFeatureData.type.modelProperties
    }
  }
};

export const GeoJsonFeatureCollection: coreHttp.CompositeMapper = {
  serializedName: "FeatureCollection",
  type: {
    name: "Composite",
    className: "GeoJsonFeatureCollection",
    uberParent: "GeoJsonObject",
    polymorphicDiscriminator: GeoJsonObject.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonObject.type.modelProperties,
      ...GeoJsonFeatureCollectionData.type.modelProperties
    }
  }
};

export const GeoJsonMultiPoint: coreHttp.CompositeMapper = {
  serializedName: "MultiPoint",
  type: {
    name: "Composite",
    className: "GeoJsonMultiPoint",
    uberParent: "GeoJsonMultiPointData",
    polymorphicDiscriminator:
      GeoJsonMultiPointData.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonGeometry.type.modelProperties,
      ...GeoJsonMultiPointData.type.modelProperties
    }
  }
};

export const RouteDirectionsBatchItemResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteDirectionsBatchItemResponse",
    modelProperties: {
      ...RouteDirectionsResponse.type.modelProperties,
      ...ErrorResponse.type.modelProperties
    }
  }
};

export const GeoJsonMultiPolygon: coreHttp.CompositeMapper = {
  serializedName: "MultiPolygon",
  type: {
    name: "Composite",
    className: "GeoJsonMultiPolygon",
    uberParent: "GeoJsonMultiPolygonData",
    polymorphicDiscriminator:
      GeoJsonMultiPolygonData.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonGeometry.type.modelProperties,
      ...GeoJsonMultiPolygonData.type.modelProperties
    }
  }
};

export const RouteDirectionsBatchItem: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteDirectionsBatchItem",
    modelProperties: {
      ...BatchItem.type.modelProperties,
      response: {
        serializedName: "response",
        type: {
          name: "Composite",
          className: "RouteDirectionsBatchItemResponse"
        }
      }
    }
  }
};

export const RouteDirectionsBatchResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteDirectionsBatchResponse",
    modelProperties: {
      ...BatchResponse.type.modelProperties,
      batchItems: {
        serializedName: "batchItems",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouteDirectionsBatchItem"
            }
          }
        }
      }
    }
  }
};

export const GeoJsonPoint: coreHttp.CompositeMapper = {
  serializedName: "Point",
  type: {
    name: "Composite",
    className: "GeoJsonPoint",
    uberParent: "GeoJsonPointData",
    polymorphicDiscriminator: GeoJsonPointData.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonGeometry.type.modelProperties,
      ...GeoJsonPointData.type.modelProperties
    }
  }
};

export const GeoJsonLineString: coreHttp.CompositeMapper = {
  serializedName: "LineString",
  type: {
    name: "Composite",
    className: "GeoJsonLineString",
    uberParent: "GeoJsonLineStringData",
    polymorphicDiscriminator:
      GeoJsonLineStringData.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonGeometry.type.modelProperties,
      ...GeoJsonLineStringData.type.modelProperties
    }
  }
};

export const GeoJsonMultiLineString: coreHttp.CompositeMapper = {
  serializedName: "MultiLineString",
  type: {
    name: "Composite",
    className: "GeoJsonMultiLineString",
    uberParent: "GeoJsonMultiLineStringData",
    polymorphicDiscriminator:
      GeoJsonMultiLineStringData.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonGeometry.type.modelProperties,
      ...GeoJsonMultiLineStringData.type.modelProperties
    }
  }
};

export const GeoJsonPolygon: coreHttp.CompositeMapper = {
  serializedName: "Polygon",
  type: {
    name: "Composite",
    className: "GeoJsonPolygon",
    uberParent: "GeoJsonPolygonData",
    polymorphicDiscriminator: GeoJsonPolygonData.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonGeometry.type.modelProperties,
      ...GeoJsonPolygonData.type.modelProperties
    }
  }
};

export const GeoJsonGeometryCollection: coreHttp.CompositeMapper = {
  serializedName: "GeometryCollection",
  type: {
    name: "Composite",
    className: "GeoJsonGeometryCollection",
    uberParent: "GeoJsonGeometryCollectionData",
    polymorphicDiscriminator:
      GeoJsonGeometryCollectionData.type.polymorphicDiscriminator,
    modelProperties: {
      ...GeoJsonGeometry.type.modelProperties,
      ...GeoJsonGeometryCollectionData.type.modelProperties
    }
  }
};

export const RoutePostRouteMatrixHeaders: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoutePostRouteMatrixHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoutePostRouteDirectionsBatchHeaders: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoutePostRouteDirectionsBatchHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  GeoJsonObject: GeoJsonObject,
  "GeoJsonObject.GeoJsonGeometry": GeoJsonGeometry,
  "GeoJsonObject.Feature": GeoJsonFeature,
  "GeoJsonObject.FeatureCollection": GeoJsonFeatureCollection,
  "GeoJsonMultiPointData.MultiPoint": GeoJsonMultiPoint,
  "GeoJsonMultiPolygonData.MultiPolygon": GeoJsonMultiPolygon,
  "GeoJsonPointData.Point": GeoJsonPoint,
  "GeoJsonLineStringData.LineString": GeoJsonLineString,
  "GeoJsonMultiLineStringData.MultiLineString": GeoJsonMultiLineString,
  "GeoJsonPolygonData.Polygon": GeoJsonPolygon,
  "GeoJsonGeometryCollectionData.GeometryCollection": GeoJsonGeometryCollection
};
