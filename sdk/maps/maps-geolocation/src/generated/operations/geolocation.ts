/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Geolocation } from "../operationsInterfaces";
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GeolocationClientContext } from "../geolocationClientContext";
import {
  ResponseFormat,
  GeolocationGetIPToLocationPreviewOptionalParams,
  GeolocationGetIPToLocationPreviewResponse
} from "../models";

/** Class representing a Geolocation. */
export class GeolocationImpl implements Geolocation {
  private readonly client: GeolocationClientContext;

  /**
   * Initialize a new instance of the class Geolocation class.
   * @param client Reference to the service client
   */
  constructor(client: GeolocationClientContext) {
    this.client = client;
  }

  /**
   * **Applies to**: S0 and S1 pricing tiers.
   *
   *
   * This service will return the ISO country code for the provided IP address. Developers can use this
   * information  to block or alter certain content based on geographical locations where the application
   * is being viewed from.
   *
   *
   * __Note:__ This service returns results from IANA and does not necessarily reflect the views of
   * Microsoft  Corporation.
   * @param format Desired format of the response. Only `json` format is supported.
   * @param ip The IP address. Both IPv4 and IPv6 are allowed.
   * @param options The options parameters.
   */
  getIPToLocationPreview(
    format: ResponseFormat,
    ip: string,
    options?: GeolocationGetIPToLocationPreviewOptionalParams
  ): Promise<GeolocationGetIPToLocationPreviewResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      format,
      ip,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getIPToLocationPreviewOperationSpec
    ) as Promise<GeolocationGetIPToLocationPreviewResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getIPToLocationPreviewOperationSpec: coreHttp.OperationSpec = {
  path: "/geolocation/ip/{format}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IpAddressToLocationResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.ip],
  urlParameters: [Parameters.geography, Parameters.format],
  headerParameters: [Parameters.accept, Parameters.xMsClientId],
  serializer
};
